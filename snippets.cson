# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson



'.source.js':

  "app.get('/', function)":
      'prefix': 'app.get'
      'body': "
        app.get('/$1', function(req, res, next$2){\n
        \t$3\n
        $4})
      "
      
  "app.post('/', function)":
      'prefix': 'app.post'
      'body': "
        app.post('/$1', function(req, res){\n
        \t$2\n
        $3})
      "
      
  "req, res, next":
      'prefix': 'rrn callback'
      'body': "
        (req, res, next) {
          $1
        }
      "
      
  'React useState':
    'prefix': 'ust'
    'body': """
      const [$2, set$2] = useState($1);
    """
      
  'React useEffect':
    'prefix': 'uef'
    'body': """
      useEffect(() => {
        $1
      }, [$2]);
    """
    
  'React useEffect with cleanup':
    'prefix': 'uefr'
    'body': """
      useEffect(() => {
        $1
        return () => {
          $2
        }
      }, []);
    """
      
  'React Context':
    'prefix': 'rcx'
    'body': """
      import React, { useState, useEffect } from 'react';

      export const ${1}Context = React.createContext({});

      /* ${2} */
      const ${1}Provider = ({ children }) => {
      /* --------------- state --------------- */


      /* ------------- API calls ------------- */


      /* ------------- functions ------------- */


      /* -------------- effects -------------- */


      return (
        <${1}Context.Provider 
          value={{
            /* state */
            
            /* functions */
            
          }}
        >
          {children}
        </${1}Context.Provider>
      )
      };
      export default ${1}Provider;
    """
