{
  "_args": [
    [
      {
        "raw": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
        "spec": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
        "type": "local"
      },
      "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/apm-install-dir-11906-91351-d29ut0.xlses714i"
    ]
  ],
  "_from": "../d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
  "_id": "linter-eslint@8.5.0",
  "_inCache": true,
  "_location": "/linter-eslint",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
    "spec": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
  "_shasum": "ef29905a6f4b19926f212f3788709bbc785b75d6",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/d-11906-91351-1sv30q3.l941l40a4i/package.tgz",
  "_where": "/private/var/folders/v1/5jkv371936q4316w4dfqxsp40000gq/T/apm-install-dir-11906-91351-d29ut0.xlses714i",
  "atomTranspilers": [
    {
      "glob": "{src,spec}/*.js",
      "transpiler": "atom-babel6-transpiler",
      "options": {
        "setBabelEnv": false,
        "babel": {
          "presets": [
            [
              "env",
              {
                "targets": {
                  "node": "current"
                }
              }
            ]
          ],
          "sourceMaps": "inline",
          "babelrc": false
        },
        "cacheKeyFiles": [
          "package.json"
        ]
      }
    }
  ],
  "bugs": {
    "url": "https://github.com/AtomLinter/linter-eslint/issues"
  },
  "configSchema": {
    "scopes": {
      "title": "List of scopes to run ESLint on, run `Editor: Log Cursor Scope` to determine the scopes for a file.",
      "type": "array",
      "default": [
        "source.js",
        "source.jsx",
        "source.js.jsx",
        "source.flow",
        "source.babel",
        "source.js-semantic"
      ],
      "items": {
        "type": "string"
      },
      "order": 1
    },
    "lintHtmlFiles": {
      "title": "Lint HTML Files",
      "description": "You should also add `eslint-plugin-html` to your .eslintrc plugins",
      "type": "boolean",
      "default": false,
      "order": 2
    },
    "autofix": {
      "type": "object",
      "order": 3,
      "title": "Automatic Fixes",
      "properties": {
        "fixOnSave": {
          "title": "Fix errors on save",
          "description": "Have eslint attempt to fix some errors automatically when saving the file.",
          "type": "boolean",
          "default": false,
          "order": 1
        },
        "ignoreFixableRulesWhileTyping": {
          "title": "Ignore fixable rules while typing",
          "description": "Have the linter ignore all fixable rules during linting when editing a document. The list is automatically updated on each lint job, and requires at least one run to be populated. Only supported when using ESLint v4+.",
          "type": "boolean",
          "default": false,
          "order": 2
        },
        "rulesToDisableWhileFixing": {
          "title": "Disable specific rules from fixes",
          "description": "Prevent rules from being auto-fixed by ESLint. Applies to fixes made during saves as well as when running the `Linter Eslint: Fix File` command.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "order": 3
        }
      }
    },
    "global": {
      "type": "object",
      "order": 4,
      "title": "Global ESLint",
      "properties": {
        "useGlobalEslint": {
          "title": "Use global ESLint installation",
          "description": "Make sure you have it in your $PATH",
          "type": "boolean",
          "default": false,
          "order": 1
        },
        "eslintrcPath": {
          "title": ".eslintrc Path",
          "description": "It will only be used when there's no config file in project",
          "type": "string",
          "default": "",
          "order": 4
        },
        "globalNodePath": {
          "title": "Global Node Installation Path",
          "description": "Write the value of `npm get prefix` here",
          "type": "string",
          "default": "",
          "order": 2
        }
      }
    },
    "disabling": {
      "type": "object",
      "order": 5,
      "properties": {
        "disableWhenNoEslintConfig": {
          "title": "Disable when no ESLint config is found (in package.json or .eslintrc)",
          "type": "boolean",
          "default": true,
          "order": 1
        },
        "rulesToSilenceWhileTyping": {
          "title": "Silence specific rules while typing",
          "description": "Useful when Atom fixes errors on save like `no-trailing-spaces` or `eol-last`.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "order": 2
        }
      }
    },
    "advanced": {
      "type": "object",
      "collapsed": true,
      "title": "Uncommon",
      "order": 6,
      "properties": {
        "disableEslintIgnore": {
          "title": "Don't use .eslintignore files",
          "type": "boolean",
          "default": false,
          "order": 1
        },
        "disableFSCache": {
          "title": "Disable FileSystem Cache",
          "description": "Paths of node_modules, .eslintignore and others are normally cached",
          "type": "boolean",
          "default": false,
          "order": 2
        },
        "showRuleIdInMessage": {
          "title": "Show Rule ID in Messages",
          "type": "boolean",
          "default": true,
          "order": 3
        },
        "eslintRulesDirs": {
          "title": "ESLint Rules Directories",
          "description": "Specify a comma separated list of directories for ESLint to load rules from.",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "order": 4
        },
        "localNodeModules": {
          "title": "Path to the local node_modules folder",
          "description": "Optionally specify the path to the local node_modules folder",
          "type": "string",
          "default": "",
          "order": 5
        }
      }
    }
  },
  "dependencies": {
    "atom-babel6-transpiler": "1.2.0",
    "atom-linter": "10.0.0",
    "atom-package-deps": "4.6.2",
    "babel-preset-env": "1.7.0",
    "consistent-path": "2.0.3",
    "crypto-random-string": "1.0.0",
    "eslint": "4.19.1",
    "eslint-rule-documentation": "1.0.21",
    "fs-plus": "3.1.1",
    "resolve-env": "1.0.0",
    "user-home": "2.0.0"
  },
  "description": "Lint JavaScript on the fly, using ESLint",
  "devDependencies": {
    "@commitlint/cli": "7.2.1",
    "@commitlint/config-conventional": "7.1.2",
    "@commitlint/travis-cli": "7.2.1",
    "eslint-config-airbnb-base": "13.1.0",
    "eslint-plugin-import": "2.14.0",
    "husky": "1.3.1",
    "jasmine-fix": "1.3.1",
    "rimraf": "2.6.2"
  },
  "engines": {
    "atom": ">=1.13.0 <2.0.0"
  },
  "eslintConfig": {
    "rules": {
      "no-console": "off",
      "semi": [
        "error",
        "never"
      ],
      "comma-dangle": "off",
      "global-require": "off",
      "import/no-unresolved": [
        "error",
        {
          "ignore": [
            "atom"
          ]
        }
      ],
      "object-curly-newline": [
        "error",
        {
          "ObjectExpression": {
            "minProperties": 5,
            "multiline": true,
            "consistent": true
          },
          "ObjectPattern": {
            "minProperties": 5,
            "multiline": true,
            "consistent": true
          }
        }
      ]
    },
    "extends": "airbnb-base",
    "globals": {
      "atom": "true"
    },
    "env": {
      "node": true,
      "browser": true
    }
  },
  "homepage": "https://github.com/AtomLinter/linter-eslint#readme",
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "license": "MIT",
  "main": "./src/main.js",
  "name": "linter-eslint",
  "optionalDependencies": {},
  "package-deps": [
    "linter:2.0.0"
  ],
  "providedServices": {
    "linter": {
      "versions": {
        "2.0.0": "provideLinter"
      }
    }
  },
  "readme": "# linter-eslint\n\n[![Build Status](https://travis-ci.org/AtomLinter/linter-eslint.svg)](https://travis-ci.org/AtomLinter/linter-eslint)\n[![Dependency Status](https://david-dm.org/AtomLinter/linter-eslint.svg)](https://david-dm.org/AtomLinter/linter-eslint)\n\nThis linter plugin for [Linter](https://github.com/AtomLinter/Linter) provides\nan interface to [eslint](http://eslint.org). It will be used with files that\nhave the \"JavaScript\" syntax.\n\n## Installation\n\n```ShellSession\napm install linter-eslint\n```\n\n`linter-eslint` will look for a version of `eslint` local to your project and\nuse it if it's available. If none is found it will fall back to the version it\nships with.\n\nLets say you depend on a specific version of `eslint`, maybe it has unreleased\nfeatures, maybe it's just newer than what `linter-eslint` ships with. If\n`your-project/node_modules/eslint` exists `linter-eslint` will be used.\nThis package requires an `eslint` of at least v1.0.0.\n\nNote that if you do not have the `linter` package installed it will be\ninstalled\nfor you. If you are using an alternative `linter-*` consumer feel free\nto disable the `linter` package.\n\n## Use with plugins\n\nYou have two options:\n\n*   Install locally to your project `eslint` and the plugin\n\n    *   `$ npm i --save-dev eslint [eslint-plugins]`\n\n*   Install globally `eslint` and plugins\n\n    *   `$ npm i -g eslint [eslint-plugins]`\n    *   Activate `Use Global Eslint` package option\n    *   (Optional) Set `Global Node Path` with `$ npm config get prefix`\n\n## Using ESLint\n\nNote that recent versions of ESLint do not use any rules by-default. This\nmeans you have to specify a configuration file for your project!\n\nTo do this in a straightforward way run this:\n\n```ShellSession\neslint --init\n```\n\nAlternatively you can create the `.eslintrc` file by yourself. It is a good\nidea to have a look at the [ESLint documentation](http://eslint.org/docs/user-guide/configuring),\nincluding the [list of rules](http://eslint.org/docs/rules/).\n\n## A Note About Settings\n\nIf Use Global is on, Atom will use the global ESLint. The path to it is figured out by running `npm get prefix`. If this fails for any reason, you can set the global path manually in Global Node Installation Path.\n\nIf Use Global is off, Atom will try to find a local installation in the project folder, look if there's ESLint in `${PROJECT_ROOT}/node_modules` and use it if found.\n\nThe path to the local node_modules folder can be a path relative to the project or an absolute path and should end in /node_modules/. This path is used if the other methods of discovery have failed.\n\nIf there is no local installation Atom will use the built-in ESLint in the linter-eslint package itself.\n\n## Contributing\n\nSee the [contributing guidelines](./CONTRIBUTING.md) to get started\n",
  "readmeFilename": "README.md",
  "renovate": {
    "extends": [
      "config:base"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AtomLinter/linter-eslint.git"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "apm test"
  },
  "version": "8.5.0"
}
